System.out.println("Hello World"); - Wyświetlanie na ekranie
Scanner scanner = new Scanner(System.in); String name = scanner.nextLine(); - Wpisywanie do konsoli
nextLine() - wstrzymuje działanie programu do momentu, w którym użytkownik wpisze coś w konsoli i zatwierdzi enterem
if (name.endsWith("a")) {System.out.println("Jesteś kobietą");} - If
endsWith() - Określa, czy koniec tego wystąpienia ciągu pasuje do określonego znaku.
else if (name.endsWith("l")){System.out.println("Twoje imie kończy się na litere l");} - Else if
else{System.out.println("Jesteś mężczyzną");} - Else
if (!name.isEmpty() && name.endsWith("a")) - !name.isEmpty() sprawdza czy nie jest puste
name.equals() - metoda która służy do porównywania typów obiektowych (np || name.equals("Barnaba"))
boolean isSkyBlue = true; - typ przechowujący wartości prawda/fałsz
for (int i = 0; i < 10; i++){System.out.println(i);} - Pętla For
i+= 2 - zwiększanie o 2
while (i < 10) {System.out.println("i mniejsze od 10");i++;} - Pętla While
do {System.out.println("i mniejsze od 10");} while (isSkyBlue); - Pętla Do..While
break - natychmiastowego zakończenia pętli
continue - przerywa aktualne wywołanie pętli, ale przechodzi do następnej iteracji pętli
i % 5 == 0 - liczba podzielna przez 5
new - Utworzenie nowego obiektu - czyli instancji klasy
Random random = new Random();int numberToGuess = random.Int(100) + 1; - generator liczby losowej
String[] names = new String[4]; - Tablice
String[] names = {1,2,3,4} - Tablice - inny sposób
for (String name : names){System.out.println(name);} - Pętla for each, weź tablice names, stwórz dla każdego elementu zmienną name i wyświetl na ekranie.
array.length - Cała długość tablicy (np wyświetla całą tablice przy sout)
List<String> names = new ArrayList<>(); - Lista Tablicy
names.add("Mariusz"); - Dodawanie elementu do tablicy
names.remove("Mariusz"); - Usuwanie elementu z tablicy
names.contains("Dominik"); - Sprawdza czy element znajduję się na liście
names.get(0); - Pobieranie elementu z listy
names.isEmpty(); - Sprawdzanie czy lista jest pusta
names.clear(); - Wyczyszczenie listy
Collections.sort(names); - Sortowanie listy
Set<String> meals = new HashSet<>(); - prawie jak Lista Tablicy, ale nie są dozwolone duplikaty elementów.
Map<String, String> nameToMeal = new HashMap<>(); nameToMeal.put("Mariusz", "Pizza"); - obiekt mapujący wartości parametrów na podstawie klucza. 
Set<String> keys = nameToMeal.keySet(); - Wyświetlanie mapy z kluczami
Collection<String> values = nameToMeal.values(); - Wyświetlanie mapy z wartościami
System.out.println(nameToMeal.containsKey("Mariusz")); - Sprawdzanie czy jest podany klucz
System.out.println(nameToMeal.containsValue("Pizza")); - Sprawdzanie czy jest taka wartość
switch (userChoice) {case 1 -> System.out.println("wybrano 1");} - Switch, czyli wybieranie opcji
Party party = new Party(); - Dodanie klasy do Maina i przypisanie jej do klasy party
this.name = name; - this jest po to żeby java wiedziała że ma przypisać argument name do pola name w klasie
int phoneNumber = Integer.valueOf(scanner.nextLine()); - Piszemy liczbe int, ale zeby po wcisnieciu entera cos sie robilo wpisujemy to
String isVegarString = isVegan ? "tak" : "nie"; - isVegan jest boolean, po znaku zapytania wyświetlamy co ma się wyświetlić jak będziee true, a po dwukropku false

                                                        Skróty klawiszowe 

ctrl + alt + v = tworzenie zmiennej
ctrl + / - komentarze
ppm -> Generate -> Constructor -> Wybieramy wszystko - tworzenie konstruktora
ppm -> Generate -> Getter -> Wybieramy wszystko - tworzenie Gettera, metody która umożliwia pobranie wartości prywatnego pola z zewnątrz.
ppm -> Generate -> Setter -> Wybieramy wszystko - tworzenie Settera, metody która umożliwia zmiane wartości prywatnego pola z zewnątrz.
